My various config files - use at your own risk! This includes instructions on how to do this.

Adding your config files to GitHub

You.ll also nee to Signup for a free GitHub account, and create a new repository. 
GitHub uses public-key cryptography and SSH for authentication, so you.ll need to 
create a SSH public key on each machine you.ll be accessing GitHub from. 

Here's how to do this:

$ cd ~/.ssh
$ mkdir backup
$ mv id_rsa* key_backup
$ ssh-keygen -t rsa -C "darf@hostname"

Adding ssh-agent to teh startup file (.zshrc):
---------------------------------------------------------
SSH_ENV="$HOME/.ssh/environment"

function start_agent {
  echo "Initializing new SSH agent..."
  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
  echo succeeded
  chmod 600 "${SSH_ENV}"
  . "${SSH_ENV}" > /dev/null
  /usr/bin/ssh-add;
}

# Source SSH settings, if applicable
if [ -f "${SSH_ENV}" ]; then
  . "${SSH_ENV}" > /dev/null
  #ps ${SSH_AGENT_PID} doesn't work under cywgin
  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
    start_agent;
  }
else
  start_agent;
fi
--------------------------------------------------------
After adding your public key details to your GitHub account page you.re ready to add your config files:

  git init
  git add .zshrc
  git add .vimrc
  git add <any other config files you want to add>
  git commit -m 'Initial commit'
  git remote add origin git@github.com:gameforce/dotfiles.git # Your URL will differ
  git push origin master

Now all your config files are on GitHub!

Setting up a new machine

You'll need to create a SSH public key on the new machine, just as you did on the previous one.

Once you.ve done that:

  git init
  git pull git@github.com:gameforce/dotfiles.git
  git remote add origin git@github.com:gameforce/dotfiles.git

And your setup will match your other machine!

Making changes

The real benefit of storing your config files on GitHub is that it makes it really easy to synchronize 
changes between all your computers. After making a change on one computer:

  git commit -a -m "Useful commit message goes here"
  git push origin master

Then all you need to do on your other machines is issue the following command:

  git pull origin master

And you.re synced!
